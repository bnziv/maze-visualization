var b=Object.defineProperty;var L=(e,t,s)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var d=(e,t,s)=>L(e,typeof t!="symbol"?t+"":t,s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))n(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function s(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(r){if(r.ep)return;r.ep=!0;const i=s(r);fetch(r.href,i)}})();class w{constructor(t,s){d(this,"x");d(this,"y");d(this,"visited",!1);d(this,"path",!1);d(this,"previous",null);d(this,"walls",{top:!0,right:!0,bottom:!0,left:!0});this.x=t,this.y=s}clone(){const t=new w(this.x,this.y);return t.visited=this.visited,t.path=this.path,t.walls={...this.walls},t}}class v{constructor(t,s){d(this,"rows");d(this,"cols");d(this,"grid");d(this,"startCell",null);d(this,"endCell",null);d(this,"currentCell",null);this.rows=t,this.cols=s,this.grid=new Array(t).fill(null).map((n,r)=>new Array(s).fill(null).map((i,o)=>new w(o,r)))}generateRecursiveBacktracking(){const t=[],s=this.grid[Math.floor(Math.random()*this.rows)][Math.floor(Math.random()*this.cols)];for(t.push(s),s.visited=!0;t.length>0;){const n=t.pop(),r=this.getUnvisitedNeighbors(n);if(r.length>0){t.push(n);const i=r[Math.floor(Math.random()*r.length)];this.removeWall(n,i),i.visited=!0,t.push(i)}}}getUnvisitedNeighbors(t){const s=[],n=[[t.y,t.x-1],[t.y,t.x+1],[t.y-1,t.x],[t.y+1,t.x]];for(const[r,i]of n)this.inBounds(r,i)&&!this.grid[r][i].visited&&s.push(this.grid[r][i]);return s}removeWall(t,s){t.x===s.x?t.y<s.y?(t.walls.bottom=!1,s.walls.top=!1):(t.walls.top=!1,s.walls.bottom=!1):t.y===s.y&&(t.x<s.x?(t.walls.right=!1,s.walls.left=!1):(t.walls.left=!1,s.walls.right=!1))}getNeighbors(t,s=!1){const n=[],r=[{wall:"top",x:0,y:-1},{wall:"right",x:1,y:0},{wall:"bottom",x:0,y:1},{wall:"left",x:-1,y:0}];for(const{wall:i,x:o,y:l}of r)if(!t.walls[i]){const a=t.y+l,c=t.x+o;this.inBounds(a,c)&&!this.grid[a][c].visited&&n.push(this.grid[a][c])}return s&&n.sort(()=>Math.random()-.5),n}inBounds(t,s){return t>=0&&t<this.rows&&s>=0&&s<this.cols}setStartCell(t){this.startCell=t}setEndCell(t){this.endCell=t}reset(){for(let t=0;t<this.rows;t++)for(let s=0;s<this.cols;s++)this.grid[t][s].visited=!1,this.grid[t][s].path=!1}getGrid(){return this.grid}clone(){const t=new v(this.rows,this.cols);return t.grid=this.grid.map(s=>s.map(n=>n.clone())),t.startCell=t.grid[this.startCell.y][this.startCell.x],t.endCell=t.grid[this.endCell.y][this.endCell.x],t}tracePath(){let t=this.endCell;for(;t!=null;)t.path=!0,t=t.previous}generateKruskalsMaze(){const t=new Map;this.grid.flat().forEach(n=>t.set(n,new Set([n])));const s=[];for(let n=0;n<this.rows;n++)for(let r=0;r<this.cols;r++){const i=this.grid[n][r];r<this.cols-1&&s.push({cell1:i,cell2:this.grid[n][r+1]}),n<this.rows-1&&s.push({cell1:i,cell2:this.grid[n+1][r]})}s.sort(()=>Math.random()-.5);for(const{cell1:n,cell2:r}of s){const i=t.get(n),o=t.get(r);if(i!==o){this.removeWall(n,r);const l=new Set([...i,...o]);l.forEach(a=>t.set(a,l))}}}}function*M(e){if(!e.startCell||!e.endCell)return;e.reset();const t=[];let s=e.startCell;for(t.push(s);t.length>0;){if(s=t.pop(),s.visited=!0,e.currentCell=s,s===e.endCell){e.tracePath();break}for(const n of e.getNeighbors(s))t.push(s),n.previous=s,t.push(n);yield e}yield e}function*x(e){if(!e.startCell||!e.endCell)return;e.reset();const t=[],s=new Map;let n=e.startCell;for(t.push(n),s.set(n,null);t.length>0;){if(n=t.shift(),n.visited=!0,e.currentCell=n,n===e.endCell){e.tracePath();break}for(const r of e.getNeighbors(n))r.previous=n,t.push(r),s.set(r,n);yield e}yield e}function*B(e){if(!e.startCell||!e.endCell)return;e.reset();const t=i=>Math.abs(i.x-e.endCell.x)+Math.abs(i.y-e.endCell.y),s=[e.startCell],n=new Map,r=new Map;for(n.set(e.startCell,0),r.set(e.startCell,t(e.startCell));s.length>0;){s.sort((o,l)=>(r.get(o)??1/0)-(r.get(l)??1/0));const i=s.shift();if(e.currentCell=i,i===e.endCell){e.tracePath();break}i.visited=!0;for(const o of e.getNeighbors(i)){const l=(n.get(i)??1/0)+1;l<(n.get(o)??1/0)&&(o.previous=i,n.set(o,l),r.set(o,l+t(o)),s.includes(o)||s.push(o))}yield e}yield e}const f=document.getElementById("maze-container");f.style.gridTemplateColumns="repeat(2, 1fr)";f.style.gap="20px";let p=null,m=null,g=null,y=null,h=null;function C(e,t,s=!0){const n=document.createElement("div");s&&(n.appendChild(document.createElement("h2")).textContent=t);const r=e.getGrid(),i=document.createElement("div");return i.id=`maze-${t}`,i.className="maze",i.innerHTML="",i.style.gridTemplateColumns=`repeat(${r[0].length}, 1fr)`,r.forEach(o=>{o.forEach(l=>{const a=document.createElement("div");a.className="cell",a.addEventListener("click",()=>I(a,l,e)),a.addEventListener("contextmenu",c=>{c.preventDefault(),N(a,l,e)}),E(l,a),l==e.startCell&&a.classList.add("start"),l==e.endCell&&a.classList.add("end"),l.visited&&a.classList.add("visited"),l.path&&a.classList.add("path"),i.appendChild(a)})}),n.appendChild(i),n}function E(e,t){["top","right","bottom","left"].forEach(l=>{if(e.walls[l]){const a=document.createElement("div");a.className=`${l}-wall`,t.appendChild(a)}});const n=document.createElement("div");n.className="corner-top-left",t.appendChild(n);const r=document.createElement("div");r.className="corner-top-right",t.appendChild(r);const i=document.createElement("div");i.className="corner-bottom-left",t.appendChild(i);const o=document.createElement("div");if(o.className="corner-bottom-right",t.appendChild(o),e==p){const l=document.createElement("div");l.classList.add("start"),t.appendChild(l)}else if(e==g){const l=document.createElement("div");l.classList.add("end"),t.appendChild(l)}}function I(e,t,s){e===m||e===y||(p?(m.classList.remove("start"),e.classList.add("start"),m=e,p=t,s.setStartCell(p)):(e.classList.add("start"),m=e,p=t,s.setStartCell(t)))}function N(e,t,s){e===m||e===y||(g?(y.classList.remove("end"),e.classList.add("end"),y=e,g=t,s.setEndCell(g)):(e.classList.add("end"),y=e,g=t,s.setEndCell(t)))}document.getElementById("solve").addEventListener("click",async()=>{if(!p||!g){alert("Please add a start and end cell first.");return}document.getElementsByClassName("instructions")[0].style.display="none";const e=[];if(document.getElementById("bfs").checked&&e.push("bfs"),document.getElementById("dfs").checked&&e.push("dfs"),document.getElementById("astar").checked&&e.push("astar"),e.length===0)return;const t={bfs:e.includes("bfs")?h.clone():null,dfs:e.includes("dfs")?h.clone():null,astar:e.includes("astar")?h.clone():null};f.innerHTML="",document.getElementById("maze-Generation")&&document.getElementById("maze-Generation").remove(),t.bfs&&f.appendChild(C(t.bfs,"BFS")),t.dfs&&f.appendChild(C(t.dfs,"DFS")),t.astar&&f.appendChild(C(t.astar,"A*"));const s={bfs:x(t.bfs),dfs:M(t.dfs),astar:B(t.astar)},n=async(i,o)=>{for(const l of i)o.innerHTML="",l.getGrid().forEach(a=>{a.forEach(c=>{const u=document.createElement("div");u.className="cell",E(c,u),c==l.startCell&&u.classList.add("start"),c==l.endCell&&u.classList.add("end"),c==l.currentCell&&u.classList.add("current"),c.visited&&u.classList.add("visited"),c.path&&u.classList.add("path"),o.appendChild(u)})}),await new Promise(a=>setTimeout(a,50))},r=[];if(t.bfs){const i=document.getElementById("maze-BFS");r.push(n(s.bfs,i))}if(t.dfs){const i=document.getElementById("maze-DFS");r.push(n(s.dfs,i))}if(t.astar){const i=document.getElementById("maze-A*");r.push(n(s.astar,i))}await Promise.all(r)});document.getElementById("generate").addEventListener("click",()=>{f.innerHTML="";const e=parseInt(document.getElementById("rows").value,10),t=parseInt(document.getElementById("cols").value,10);if(isNaN(e)||isNaN(t)||e<5||t<5){alert("Please enter valid dimensions (min: 5x5)");return}h=new v(Math.min(e,31),Math.min(t,31));const s=document.getElementById("algorithm").value;s==="recursive"?h.generateRecursiveBacktracking():s==="kruskal"&&h.generateKruskalsMaze(),h.reset(),document.getElementById("maze-Generation")&&document.getElementById("maze-Generation").remove();const n=C(h,"Generation",!1);n.style.width="fit-content",n.style.margin="0 auto",n.id="maze-Generation",f.style.display="flex",f.style.justifyContent="center",f.before(n),document.getElementById("solve-container").style.display="block"});
